"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9305],{21723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(74848),r=t(28453);const a={},i="Ingress with externalTrafficPolicy: local",s={id:"container/components/k8s-cluster-api-provider/doc/LoadBalancer-ExtTrafficLocal",title:"Ingress with externalTrafficPolicy: local",description:"Setting up the nginx ingress controller from the upstream deployment templates",source:"@site/docs/03-container/components/k8s-cluster-api-provider/doc/LoadBalancer-ExtTrafficLocal.md",sourceDirName:"03-container/components/k8s-cluster-api-provider/doc",slug:"/container/components/k8s-cluster-api-provider/doc/LoadBalancer-ExtTrafficLocal",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/LoadBalancer-ExtTrafficLocal",draft:!1,unlisted:!1,editUrl:"https://github.com/SovereignCloudStack/docs/tree/main/docs/03-container/components/k8s-cluster-api-provider/doc/LoadBalancer-ExtTrafficLocal.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Maintenance and Troubleshooting Guide for SCS k8s-cluster-api-provider",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/Maintenance_and_Troubleshooting"},next:{title:"SCS k8s-cluster-api-provider upgrade guide",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/Upgrade-Guide"}},c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"ingress-with-externaltrafficpolicy-local",children:["Ingress with ",(0,o.jsx)(n.code,{children:"externalTrafficPolicy: local"})]}),"\n",(0,o.jsxs)(n.p,{children:["Setting up the nginx ingress controller from the upstream deployment templates\nusing the ",(0,o.jsx)(n.code,{children:"externalTrafficPolicy: local"})," setting and -- without any special\ntreatment -- results in a service that is only partially working: Only requests\nthat the LoadBalancer happens to route at the node where the nginx container is\nrunning get a response."]}),"\n",(0,o.jsxs)(n.p,{children:["nginx could just use the ",(0,o.jsx)(n.code,{children:"cluster"})," setting instead and kube-proxy would forward\nthe network packets. There are two reasons for nginx not to do that"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Having a load-balancer balance the traffic to a node that is not active just\nto have kube-proxy forward it to the active node does not make much sense.\nIt creates an unnecessary hop and makes the LoadBalancer pretty useless."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Packets forwarded by kube-proxy do not carry the original client IP, so any\nsource IP dependant handling in nginx (filtering, QoS, ...) will not be\npossible."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h1,{id:"getting-it-to-work-for-managed-ingress",children:"Getting it to work for managed ingress"}),"\n",(0,o.jsx)(n.p,{children:"There does not seem to be a standard mechanism where k8s tells the LoadBalancer (LB)\nwhich backend members are active, but the load-balancer can find this out by using\na health-monitor that probes for the availability of the service and then takes\nthe inactive nodes out of the rotation. Should the container be rescheduled on\nsome other node, the health-monitor will adapt within a few seconds."}),"\n",(0,o.jsx)(n.p,{children:"Since SCS R2, the deployed nginx-ingress deployment is patched to carry a service\nannotation (a behavior specifically needed by OpenStack) that enables the health-monitor for the LB in\nfront of the ingress. This results in traffic to flow."}),"\n",(0,o.jsxs)(n.p,{children:["This covers the nginx ingress controller that is deployed by setting\n",(0,o.jsx)(n.code,{children:"DEPLOY_NGINX_INGRESS: true"})," with the ",(0,o.jsx)(n.code,{children:"create_cluster.sh"})," or ",(0,o.jsx)(n.code,{children:"apply_nginx_ingress.sh"}),'.\nThat the ingress we call the "managed ingress".']}),"\n",(0,o.jsx)(n.p,{children:"For the ingress service to see the client IPs, more is needed. The Octavia LB\nas well as the nginx service both support the proxy protocol, which can be used to\ncommunicate the real client IP. We had plumbing included which we disabled by\ndefault prior to releasing R2, because it broke the access to ingress from\nsoftware that runs inside the cluster."}),"\n",(0,o.jsxs)(n.p,{children:["A workaround for this has been implemented, so the default is\n",(0,o.jsx)(n.code,{children:"NGINX_USE_PROXY: true"})," as of R4. So the managed nginx ingress service\ndoes work reliably and gets the client IPs."]}),"\n",(0,o.jsx)(n.h1,{id:"getting-it-to-work-in-general",children:"Getting it to work in general"}),"\n",(0,o.jsxs)(n.p,{children:["Users that deploy their own nginx or other services with ",(0,o.jsx)(n.code,{children:"externalTrafficPolicy: local"}),"\nwon't be helped by the annotations done by the SCS cluster management. They will\nhave to do similar custom patching or revert to a ",(0,o.jsx)(n.code,{children:"cluster"})," policy and forego the\nvisibility on real client IPs."]}),"\n",(0,o.jsx)(n.p,{children:"A generic solution to this would be a different kind of LB that does work at the\nnetworking layer 3 (routing), so the (TCP) connections are not terminated at the\nLB and then data being forwarded on a new connection to the backend member, but\nthe routing would create a direct connection. Google (with Direct Server Return, DSR)\nand Azure support such LB modes."}),"\n",(0,o.jsx)(n.p,{children:"As it turns out, on OpenStack clouds that use OVN as networking (SDN) layer, the OVN\nloadbalancer does almost deliver what's needed."}),"\n",(0,o.jsx)(n.h1,{id:"ovn-provider-loadbalancer",children:"OVN provider LoadBalancer"}),"\n",(0,o.jsx)(n.p,{children:"The OVN provider for the load-balancer does create direct flows to the chosen backend\nmember, so no proxy protocol (or similar hacks) are needed to make the backend service\nsee the client IPs. This has been validated (and can even be monitored by openstack-health-monitor)\non SCS clouds that use OVN."}),"\n",(0,o.jsxs)(n.p,{children:["A health-monitor is still needed to ensure that only active members receive requests.\nHealth monitors for the ovn provider are only supported on OpenStack Wallaby and later.\nSee also occm ",(0,o.jsx)(n.a,{href:"https://github.com/kubernetes/cloud-provider-openstack/blob/master/docs/openstack-cloud-controller-manager/using-openstack-cloud-controller-manager.md",children:"docs"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["OVN LoadBalancer can be enabled by setting ",(0,o.jsx)(n.code,{children:'use_ovn_lb_provider = "true"'})," or ",(0,o.jsx)(n.code,{children:'use_ovn_lb_provider = "auto"'}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that the ",(0,o.jsx)(n.code,{children:"use_ovn_lb_provider"})," does not affect the LB in front of the kube API.\nThat one is created by capo and requires other settings. Also note that it would\nnot yet support the ",(0,o.jsx)(n.a,{href:"https://docs.openstack.org/octavia/latest/user/feature-classification/index.html#operation_allowed_cidr",children:"CIDR filtering"}),"\nwith ",(0,o.jsx)(n.code,{children:"restrict_kubeapi"})," setting."]}),"\n",(0,o.jsx)(n.h1,{id:"disabled-health-monitor-by-default",children:"Disabled health-monitor by default"}),"\n",(0,o.jsxs)(n.p,{children:["We could enable a health-monitor by default for load-balancers created from OCCM\nin the k8s clusters. This would make services with ",(0,o.jsx)(n.code,{children:"externalTrafficPolicy: local"}),"\nwork, as the traffic would be routed exclusively to active members. But the\nother goal would not be achieved: Getting the real client IPs.\nWe decided against turning on the health-monitor by default, as this might result\nin the wrong impression that ",(0,o.jsx)(n.code,{children:"local"})," fully works. Rather break and then have users take\na decision to go for ",(0,o.jsx)(n.code,{children:"cluster"}),", to enable health-monitoring to get it half-working\nor to do health-monitoring plus some extra plumbing for proxy protocol (or similar)\nto get all aspects working."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(96540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);