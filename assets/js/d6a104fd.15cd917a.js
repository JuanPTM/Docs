"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3637],{97625:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=i(74848),r=i(28453);const s={},o="Container registry configuration",c={id:"container/components/k8s-cluster-api-provider/doc/usage/containter-registry-configuration",title:"Container registry configuration",description:"Containerd as container runtime",source:"@site/docs/03-container/components/k8s-cluster-api-provider/doc/usage/containter-registry-configuration.md",sourceDirName:"03-container/components/k8s-cluster-api-provider/doc/usage",slug:"/container/components/k8s-cluster-api-provider/doc/usage/containter-registry-configuration",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/usage/containter-registry-configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/SovereignCloudStack/docs/tree/main/docs/03-container/components/k8s-cluster-api-provider/doc/usage/containter-registry-configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Testing",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/usage/testing"},next:{title:"Custom CA",permalink:"/docs/container/components/k8s-cluster-api-provider/doc/usage/custom-ca"}},a={},l=[{value:"Tutorial: configure an existing cluster to use containerd registry configuration",id:"tutorial-configure-an-existing-cluster-to-use-containerd-registry-configuration",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"container-registry-configuration",children:"Container registry configuration"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/containerd/containerd",children:"Containerd"})," as container runtime\ninterface (CRI) used in the reference SCS KaaS implementation allows configuring its\nbehavior when it interacts with public or private container registry hosts. Container\nregistry hosts configuration options in containerd are well described in\nrelated ",(0,t.jsx)(n.a,{href:"https://github.com/containerd/containerd/blob/main/docs/hosts.md",children:"docs"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This feature could be useful in various uses cases, e.g.:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configure containerd to use a custom CA certificate when it interacts with a container\nregistry host that uses this CA"}),"\n",(0,t.jsx)(n.li,{children:"Configure containerd to use some container registry mirror host instead of the target public or private container\nregistry.\nThis could be useful when the target container registry somehow restricts its clients e.g.\nDockerHub's pull rate limit to 100 pulls per 6 hours per IP address"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["SCS KaaS reference implementation allows users to pass container registry host config\nfiles to configure containerd. Containerd configuration is applied cluster wide as it\nis CRI used in SCS KaaS clusters. Additional registry host config files for containerd\ncould be passed through the ",(0,t.jsx)(n.code,{children:"containerd_registry_files"})," opentofu variable. This variable\nexpects an object with two attributes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hosts"})," attribute defines additional registry host config files for containerd.\nThe filename should reference the registry host namespace. Files defined in this set\nwill be copied into the ",(0,t.jsx)(n.code,{children:"/etc/containerd/certs.d"})," directory on each workload cluster node"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"certs"})," attribute defines additional client and/or CA certificate files needed for\ncontainerd authentication against registries defined by ",(0,t.jsx)(n.code,{children:"hosts"}),". Files defined in this\nset will be copied into the ",(0,t.jsx)(n.code,{children:"/etc/containerd/certs"})," directory on each workload cluster node"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The default value of the ",(0,t.jsx)(n.code,{children:"containerd_registry_files"})," variable instructs containerd to use\n",(0,t.jsx)(n.code,{children:"registry.scs.community"})," container registry instance as a public mirror of DockerHub\ncontainer registry, see related\nissue ",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-cluster-api-provider/issues/417",children:"#417"}),".\nThe host config file used as a default is\ndefined ",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-cluster-api-provider/blob/main/terraform/files/containerd/docker.io",children:"here"}),".\nThis should prevent issues with pull rate limiting from DockerHub public container registry,\ne.g. ",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-cluster-api-provider/issues/414",children:"#414"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The above default value could be overridden using any techniques that OpenTofu allows, e.g.\nvia environment variable:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'export TF_VAR_containerd_registry_files=\'{"hosts":["<path to the custom container registry host config>"], "certs":["<path to the custom CA or client certificate>"]}\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:["SCS container registry reference installation ",(0,t.jsx)(n.a,{href:"https://registry.scs.community",children:"https://registry.scs.community"}),' contains\nseveral pre-configured "proxy-cache" projects. These projects allow you to use SCS\ncontainer registry reference installation to proxy and cache images from target public\nregistries. This may reduce the load of overused public container registries and/or helps\nto avoid rate limiting by individual public registries.\nCurrently, SCS container registry is set up to "proxy-cache" the following public container registries:']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"docker.io"}),"\n",(0,t.jsx)(n.li,{children:"ghcr.io"}),"\n",(0,t.jsx)(n.li,{children:"quay.io"}),"\n",(0,t.jsx)(n.li,{children:"registry.gitlab.com"}),"\n",(0,t.jsx)(n.li,{children:"registry.k8s.io"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Find also a corresponding ",(0,t.jsx)(n.code,{children:"containerd"})," registry host config files\nin ",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-cluster-api-provider/tree/4dce164044a13b35a83690540088db2cd8457a8a/terraform/files/containerd",children:"./terraform/files/containerd"}),"\ndirectory. If you want to configure ",(0,t.jsx)(n.code,{children:"containerd"})," to use mentioned\npre-configured ",(0,t.jsx)(n.a,{href:"https://registry.scs.community",children:"SCS container registry"}),'\n"proxy cache" projects, feel free to do that e.g. as follows (path is relative to the ',(0,t.jsx)(n.code,{children:"terraform"})," directory):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'export TF_VAR_containerd_registry_files=\'{"hosts":["./files/containerd/docker.io", "./files/containerd/ghcr.io", "./files/containerd/quay.io", "./files/containerd/registry.gitlab.com", "./files/containerd/registry.k8s.io" ]}\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you did not find your preferred public container registry in the list of pre-configured\n",(0,t.jsx)(n.a,{href:"https://registry.scs.community",children:"SCS container registry"}),' "proxy cache" projects, and you would like to use\nthe ',(0,t.jsx)(n.a,{href:"https://registry.scs.community",children:"SCS container registry"}),"\nas a mirror for it, please open an issue in one of the following\nrepositories: ",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-cluster-api-provider",children:"scs/k8s-cluster-api-provider"}),",\n",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-harbor",children:"scs/k8s-harbor"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"tutorial-configure-an-existing-cluster-to-use-containerd-registry-configuration",children:"Tutorial: configure an existing cluster to use containerd registry configuration"}),"\n",(0,t.jsx)(n.p,{children:"This tutorial is experimental and out of the usual release cycle. We recommend to\nupgrade existing environments (workload clusters) with stable releases which are properly\ntested."}),"\n",(0,t.jsx)(n.p,{children:'This tutorial instructs (advanced) users what needs to be done on the cluster management\ninstance without re-deploying it via OpenTofu. Patches described in this tutorial\nmodify existing environment with changes that have been developed within "containerd registry"-related PRs:'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"PR#432"}),"\n",(0,t.jsx)(n.li,{children:"PR#447"}),"\n",(0,t.jsx)(n.li,{children:"PR#472"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Warning: This tutorial causes a rolling update (rolling re-deployment) of the control plane and worker nodes."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Log in to the cluster management instance, pull remote changes, and then checkout to relevant commit that\nincludes all mentioned PRs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd k8s-cluster-api-provider/\ngit pull\ngit checkout b31a79db26c3956b473f026038e71e9aba7819b8\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Backup the config directory of an existing cluster."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ..\ncp -R <CLUSTER_NAME> <CLUSTER_NAME>.bkp\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Ensure that the directory for containerd registry configs exists and create a default containerd registry\nconfig file that instructs containerd to use registry.scs.community container registry\ninstance as a public mirror of DockerHub.\nOptionally, create another containerd container registry host file in the ",(0,t.jsx)(n.code,{children:"containerd/hosts"})," directory.\nYou can find working examples of those files ",(0,t.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/k8s-cluster-api-provider/tree/main/terraform/files/containerd",children:"here"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cd <CLUSTER_NAME>\nmkdir -p containerd/hosts\ncat >containerd/hosts/docker.io <<EOF\nserver = "https://registry-1.docker.io"\n\n[host."https://registry.scs.community/v2/docker.io"]\n    capabilities = ["pull"]\n    override_path = true\nEOF\n# Optionally, create another containerd container registry host file here.\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Injects containerd registry host file(s) (from point 3.) into ",(0,t.jsx)(n.code,{children:"cluster-template.yaml"}),".\nScript ",(0,t.jsx)(n.code,{children:"configure_containerd.sh"})," does the injection."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"configure_containerd.sh cluster-template.yaml <CLUSTER_NAME>\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Inject containerd configuration in ",(0,t.jsx)(n.code,{children:"cluster-template.yaml"}),". This configuration allows\ncontainerd to discover registry host file(s)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Create ",(0,t.jsx)(n.code,{children:"containerd_conf_append"})," temp file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cat >containerd_conf_append <<EOF\ncat <<EOT >> /etc/containerd/config.toml\n[plugins."io.containerd.grpc.v1.cri".registry]\n  config_path = "/etc/containerd/certs.d"\nEOT\nEOF\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Inject temp file and ",(0,t.jsx)(n.code,{children:"systemctl restart containerd.service"})," line into the ",(0,t.jsx)(n.code,{children:"cluster-template.yaml"})," (inplace)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'yq \'select(.kind == "KubeadmControlPlane").spec.kubeadmConfigSpec.preKubeadmCommands |= (\n    (.[] | select(. == "apt-get install -y ca-certificates socat*") | key + 1) as $pos |\n    .[:$pos] +\n    [load_str("containerd_conf_append")] +\n    .[$pos:])\' -i cluster-template.yaml\n\nyq \'select(.kind == "KubeadmControlPlane").spec.kubeadmConfigSpec.preKubeadmCommands |= (\n    (.[] | select(. == "systemctl daemon-reload") | key + 1) as $pos |\n    .[:$pos] +\n    ["systemctl restart containerd.service"] +\n    .[$pos:])\' -i cluster-template.yaml\n\nyq \'select(.kind == "KubeadmConfigTemplate").spec.template.spec.preKubeadmCommands |= (\n    (.[] | select(. == "apt-get install -y ca-certificates socat*") | key + 1) as $pos |\n    .[:$pos] +\n    [load_str("containerd_conf_append")] +\n    .[$pos:])\' -i cluster-template.yaml\n\nyq \'select(.kind == "KubeadmConfigTemplate").spec.template.spec.preKubeadmCommands |= (\n    (.[] | select(. == "systemctl daemon-reload") | key + 1) as $pos |\n    .[:$pos] +\n    ["systemctl restart containerd.service"] +\n    .[$pos:])\' -i cluster-template.yaml\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The above changes (when point 8. will be applied) of ",(0,t.jsx)(n.code,{children:"KubeadmControlPlane"})," will cause a rolling update of control plane nodes.\nAs the ",(0,t.jsx)(n.code,{children:"KubeadmConfigTemplate"})," has been adjusted we need to increase the generation\ncounter of worker machines to ensure that the worker nodes will be rolling updated as well."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sed -r 's/(^WORKER_MACHINE_GEN: genw)([0-9][0-9])/printf \"\\1%02d\" $((\\2+1))/ge' -i clusterctl.yaml\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Workaround: If your environment contains nginx ingress deployed via k8s-cluster-api-provider\n(variable DEPLOY_NGINX_INGRESS=true) disable its update. Nginx-ingress controller has\nbeen updated to version 1.8.0 in PR#440 and later to 1.8.1. This is a breaking change that includes updates\nof immutable fields. If the above is the case skip this update as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sed 's/DEPLOY_NGINX_INGRESS: true/DEPLOY_NGINX_INGRESS: false/g' -i clusterctl.yaml\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Update the existing cluster."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"create_cluster.sh test1\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);