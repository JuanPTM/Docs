"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4016],{90330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>r});var s=t(74848),o=t(28453);const i={},a="Component Overview",p={id:"operating-scs/components/status-page/docs/component_overview",title:"Component Overview",description:"This represents a part of the decision process related to the overall structure the API wants to represent.",source:"@site/docs/04-operating-scs/components/status-page/docs/component_overview.md",sourceDirName:"04-operating-scs/components/status-page/docs",slug:"/operating-scs/components/status-page/docs/component_overview",permalink:"/docs/operating-scs/components/status-page/docs/component_overview",draft:!1,unlisted:!1,editUrl:"https://github.com/SovereignCloudStack/docs/tree/main/docs/04-operating-scs/components/status-page/docs/component_overview.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/operating-scs/components/status-page/docs/overview"},next:{title:"Components",permalink:"/docs/operating-scs/components/status-page/docs/components"}},c={},r=[];function m(e){const n={h1:"h1",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"component-overview",children:"Component Overview"}),"\n",(0,s.jsx)(n.p,{children:"This represents a part of the decision process related to the overall structure the API wants to represent."}),"\n",(0,s.jsx)(n.mermaid,{value:'C4Component\n  title status-page-openapi\n\n  Container_Boundary(impacts, "Impacts") {\n    Component(impactType, ImpactType, "ID, displayName, description")\n    Component(impact, Impact, "type, reference, severity")\n    Component(impactComponentList, ImpactComponentList, "[]Impact", "Impacts reference components")\n    Component(impactIncidentList, ImpactIncidentList, "<<readonly>>[]Impact", "Impacts reference incidents")\n    Component(severity, Severity,"name, value")\n\n    Rel(impact, impactType, "has")\n    Rel(impactComponentList, impact, "lists")\n    Rel(impactIncidentList, impact, "lists")\n    Rel(impact, severity, "has", "when used by ImpactIncidentList")\n\n    UpdateElementStyle(impact, $bgColor="green")\n    UpdateElementStyle(impactComponentList, $bgColor="green")\n    UpdateElementStyle(impactIncidentList, $bgColor="green")\n    UpdateElementStyle(severity, $bgColor="green")\n\n    UpdateRelStyle(impact, impactType, "green", "green", $offsetY="-10")\n    UpdateRelStyle(impactComponentList, impact, "green", "green", $offsetY="-15")\n    UpdateRelStyle(impactIncidentList, impact, "green", "green")\n    UpdateRelStyle(impact, severity, "green", "green")\n  }\n\n  Container_Boundary(incidents, "Incidents") {\n    Component(incidentUpdate, IncidentUpdate, "order, displayName, description, createdAt")\n    Component(incident, Incident, "ID, displayName, description, updates, affects, beganAt, endedAt, Phase")\n\n    Rel(incident, incidentUpdate, "contains")\n  }\n\n  Container_Boundary(phases, "Phases") {\n    Component(phaseReference, PhaseReference, "Phase, order, generation")\n    Component(phase, Phase, "", "it is just a name")\n    Component(phaseList, PhaseList, "generation, []Phase")\n\n    Rel(phaseList, phase, "lists")\n    Rel(phaseReference, phase, "references")\n    Rel(phaseReference, phaseList, "references")\n\n    UpdateElementStyle(phaseReference, $bgColor="green")\n    UpdateElementStyle(phaseList, $bgColor="green")\n\n    UpdateRelStyle(phaseList, phase, "green", "green", $offsetY="5")\n    UpdateRelStyle(phaseReference, phase, "green", "green", $offsetX="-30", $offsetY="10")\n    UpdateRelStyle(phaseReference, phaseList, "green", "green", $offsetY="5")\n\n  }\n\n  Container_Boundary(components, "Components") {\n    Component(component, Component, "ID, displayName, Labels, activelyAffectedBy")\n    Component(labels, Labels, "", "Key value pairs")\n\n    Rel(component, labels, "contains")\n  }\n\n  %% global relations %%\n  %% deprecated %%\n  Rel(incident, impactType, "has")\n  BiRel(component, incident, "affects / affected by")\n\n  UpdateRelStyle(incident, impactType, "red", "red")\n  UpdateRelStyle(component, incident, "red", "red", $offsetX="10")\n\n  %% new %%\n  Rel(incident, impactComponentList, "affects")\n  Rel(component, impactIncidentList, "actively affected by", "only list active/open impacts")\n  Rel(incident, phaseReference, "has")\n  Rel(impact, component, "references", "from impactComponentList")\n  Rel(impact, incident, "references", "from impactIncidentList")\n\n  UpdateRelStyle(incident, impactComponentList, "green", "green")\n  UpdateRelStyle(component, impactIncidentList, "green", "green", $offsetX="-180", $offsetY="-70")\n  UpdateRelStyle(incident, phaseReference, "green", "green", $offsetX="-70", $offsetY="40")\n  UpdateRelStyle(impact, component, "green", "green", $offsetX="-140")\n  UpdateRelStyle(impact, incident, "green", "green", $offsetX="-100")\n'}),"\n",(0,s.jsx)(n.p,{children:"Color meaning:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Blue: Existing structure"}),"\n",(0,s.jsx)(n.li,{children:"Red: Deprecated / removed"}),"\n",(0,s.jsx)(n.li,{children:"Green: New"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>p});var s=t(96540);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);